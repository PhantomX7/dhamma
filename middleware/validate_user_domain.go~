package middleware

import (
	"github.com/PhantomX7/dhamma/utility"
	"github.com/gin-gonic/gin"
	"net/http"
)

func (m *Middleware) ValidateUserDomain() gin.HandlerFunc {
	return func(c *gin.Context) {
		// Get role from context
		contextValues, err := utility.ValuesFromContext(c.Request.Context())
		if err != nil {
			return
		}

		domainCode := c.Param("domain_code")
		domain, err := m.domainRepo.FindByCode(domainCode, c)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusNotFound, gin.H{
				"error": "domain not found",
			})
			return
		}

		if !contextValues.IsRoot {
			// Check if user has domain
			hasDomain, err := m.userDomainRepo.HasDomain(contextValues.UserID, domain.ID, c)
			if err != nil {
				return
			}

			if !hasDomain {
				c.AbortWithStatusJSON(http.StatusForbidden, gin.H{
					"error": "insufficient permissions",
				})
				return
			}
		}

		c.Request = c.Request.WithContext(utility.NewContextWithValues(
			c.Request.Context(),
			utility.ContextValues{
				DomainID: &domain.ID,
				UserID:   contextValues.UserID,
				IsRoot:   contextValues.IsRoot,
			},
		))

		c.Next()
	}
}
