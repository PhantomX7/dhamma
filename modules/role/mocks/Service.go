// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/PhantomX7/dhamma/entity"
	mock "github.com/stretchr/testify/mock"

	pagination "github.com/PhantomX7/dhamma/utility/pagination"

	request "github.com/PhantomX7/dhamma/modules/role/dto/request"

	utility "github.com/PhantomX7/dhamma/utility"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Service) Create(ctx context.Context, _a1 request.RoleCreateRequest) (entity.Role, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.RoleCreateRequest) (entity.Role, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.RoleCreateRequest) entity.Role); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(entity.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.RoleCreateRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.RoleCreateRequest
func (_e *Service_Expecter) Create(ctx interface{}, _a1 interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, _a1 request.RoleCreateRequest)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.RoleCreateRequest))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 entity.Role, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, request.RoleCreateRequest) (entity.Role, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, pg
func (_m *Service) Index(ctx context.Context, pg *pagination.Pagination) ([]entity.Role, utility.PaginationMeta, error) {
	ret := _m.Called(ctx, pg)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []entity.Role
	var r1 utility.PaginationMeta
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) ([]entity.Role, utility.PaginationMeta, error)); ok {
		return rf(ctx, pg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []entity.Role); ok {
		r0 = rf(ctx, pg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) utility.PaginationMeta); ok {
		r1 = rf(ctx, pg)
	} else {
		r1 = ret.Get(1).(utility.PaginationMeta)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *pagination.Pagination) error); ok {
		r2 = rf(ctx, pg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type Service_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - pg *pagination.Pagination
func (_e *Service_Expecter) Index(ctx interface{}, pg interface{}) *Service_Index_Call {
	return &Service_Index_Call{Call: _e.mock.On("Index", ctx, pg)}
}

func (_c *Service_Index_Call) Run(run func(ctx context.Context, pg *pagination.Pagination)) *Service_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagination.Pagination))
	})
	return _c
}

func (_c *Service_Index_Call) Return(_a0 []entity.Role, _a1 utility.PaginationMeta, _a2 error) *Service_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Service_Index_Call) RunAndReturn(run func(context.Context, *pagination.Pagination) ([]entity.Role, utility.PaginationMeta, error)) *Service_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, roleID
func (_m *Service) Show(ctx context.Context, roleID uint64) (entity.Role, error) {
	ret := _m.Called(ctx, roleID)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (entity.Role, error)); ok {
		return rf(ctx, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) entity.Role); ok {
		r0 = rf(ctx, roleID)
	} else {
		r0 = ret.Get(0).(entity.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type Service_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID uint64
func (_e *Service_Expecter) Show(ctx interface{}, roleID interface{}) *Service_Show_Call {
	return &Service_Show_Call{Call: _e.mock.On("Show", ctx, roleID)}
}

func (_c *Service_Show_Call) Run(run func(ctx context.Context, roleID uint64)) *Service_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Service_Show_Call) Return(_a0 entity.Role, _a1 error) *Service_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Show_Call) RunAndReturn(run func(context.Context, uint64) (entity.Role, error)) *Service_Show_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, roleID, _a2
func (_m *Service) Update(ctx context.Context, roleID uint64, _a2 request.RoleUpdateRequest) (entity.Role, error) {
	ret := _m.Called(ctx, roleID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, request.RoleUpdateRequest) (entity.Role, error)); ok {
		return rf(ctx, roleID, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, request.RoleUpdateRequest) entity.Role); ok {
		r0 = rf(ctx, roleID, _a2)
	} else {
		r0 = ret.Get(0).(entity.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, request.RoleUpdateRequest) error); ok {
		r1 = rf(ctx, roleID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Service_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - roleID uint64
//   - _a2 request.RoleUpdateRequest
func (_e *Service_Expecter) Update(ctx interface{}, roleID interface{}, _a2 interface{}) *Service_Update_Call {
	return &Service_Update_Call{Call: _e.mock.On("Update", ctx, roleID, _a2)}
}

func (_c *Service_Update_Call) Run(run func(ctx context.Context, roleID uint64, _a2 request.RoleUpdateRequest)) *Service_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(request.RoleUpdateRequest))
	})
	return _c
}

func (_c *Service_Update_Call) Return(_a0 entity.Role, _a1 error) *Service_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Update_Call) RunAndReturn(run func(context.Context, uint64, request.RoleUpdateRequest) (entity.Role, error)) *Service_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
