// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/PhantomX7/dhamma/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	pagination "github.com/PhantomX7/dhamma/utility/pagination"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, pg
func (_m *Repository) Count(ctx context.Context, pg *pagination.Pagination) (int64, error) {
	ret := _m.Called(ctx, pg)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) (int64, error)); ok {
		return rf(ctx, pg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) int64); ok {
		r0 = rf(ctx, pg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, pg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Repository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - pg *pagination.Pagination
func (_e *Repository_Expecter) Count(ctx interface{}, pg interface{}) *Repository_Count_Call {
	return &Repository_Count_Call{Call: _e.mock.On("Count", ctx, pg)}
}

func (_c *Repository_Count_Call) Run(run func(ctx context.Context, pg *pagination.Pagination)) *Repository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagination.Pagination))
	})
	return _c
}

func (_c *Repository_Count_Call) Return(_a0 int64, _a1 error) *Repository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Count_Call) RunAndReturn(run func(context.Context, *pagination.Pagination) (int64, error)) *Repository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1, tx
func (_m *Repository) Create(ctx context.Context, _a1 *entity.User, tx *gorm.DB) error {
	ret := _m.Called(ctx, _a1, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User, *gorm.DB) error); ok {
		r0 = rf(ctx, _a1, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entity.User
//   - tx *gorm.DB
func (_e *Repository_Expecter) Create(ctx interface{}, _a1 interface{}, tx interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, _a1, tx)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, _a1 *entity.User, tx *gorm.DB)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User), args[2].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *entity.User, *gorm.DB) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx, pg
func (_m *Repository) FindAll(ctx context.Context, pg *pagination.Pagination) ([]entity.User, error) {
	ret := _m.Called(ctx, pg)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) ([]entity.User, error)); ok {
		return rf(ctx, pg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pagination.Pagination) []entity.User); ok {
		r0 = rf(ctx, pg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pagination.Pagination) error); ok {
		r1 = rf(ctx, pg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type Repository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - pg *pagination.Pagination
func (_e *Repository_Expecter) FindAll(ctx interface{}, pg interface{}) *Repository_FindAll_Call {
	return &Repository_FindAll_Call{Call: _e.mock.On("FindAll", ctx, pg)}
}

func (_c *Repository_FindAll_Call) Run(run func(ctx context.Context, pg *pagination.Pagination)) *Repository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagination.Pagination))
	})
	return _c
}

func (_c *Repository_FindAll_Call) Return(_a0 []entity.User, _a1 error) *Repository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindAll_Call) RunAndReturn(run func(context.Context, *pagination.Pagination) ([]entity.User, error)) *Repository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, userID, preloadRelations
func (_m *Repository) FindByID(ctx context.Context, userID uint64, preloadRelations bool) (entity.User, error) {
	ret := _m.Called(ctx, userID, preloadRelations)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, bool) (entity.User, error)); ok {
		return rf(ctx, userID, preloadRelations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, bool) entity.User); ok {
		r0 = rf(ctx, userID, preloadRelations)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, bool) error); ok {
		r1 = rf(ctx, userID, preloadRelations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type Repository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - preloadRelations bool
func (_e *Repository_Expecter) FindByID(ctx interface{}, userID interface{}, preloadRelations interface{}) *Repository_FindByID_Call {
	return &Repository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, userID, preloadRelations)}
}

func (_c *Repository_FindByID_Call) Run(run func(ctx context.Context, userID uint64, preloadRelations bool)) *Repository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(bool))
	})
	return _c
}

func (_c *Repository_FindByID_Call) Return(_a0 entity.User, _a1 error) *Repository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByID_Call) RunAndReturn(run func(context.Context, uint64, bool) (entity.User, error)) *Repository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDWithRelation provides a mock function with given fields: ctx, userID
func (_m *Repository) FindByIDWithRelation(ctx context.Context, userID uint64) (entity.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithRelation")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (entity.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByIDWithRelation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDWithRelation'
type Repository_FindByIDWithRelation_Call struct {
	*mock.Call
}

// FindByIDWithRelation is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *Repository_Expecter) FindByIDWithRelation(ctx interface{}, userID interface{}) *Repository_FindByIDWithRelation_Call {
	return &Repository_FindByIDWithRelation_Call{Call: _e.mock.On("FindByIDWithRelation", ctx, userID)}
}

func (_c *Repository_FindByIDWithRelation_Call) Run(run func(ctx context.Context, userID uint64)) *Repository_FindByIDWithRelation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_FindByIDWithRelation_Call) Return(_a0 entity.User, _a1 error) *Repository_FindByIDWithRelation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByIDWithRelation_Call) RunAndReturn(run func(context.Context, uint64) (entity.User, error)) *Repository_FindByIDWithRelation_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) FindByUsername(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type Repository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Repository_Expecter) FindByUsername(ctx interface{}, username interface{}) *Repository_FindByUsername_Call {
	return &Repository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", ctx, username)}
}

func (_c *Repository_FindByUsername_Call) Run(run func(ctx context.Context, username string)) *Repository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_FindByUsername_Call) Return(_a0 entity.User, _a1 error) *Repository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByUsername_Call) RunAndReturn(run func(context.Context, string) (entity.User, error)) *Repository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDomains provides a mock function with given fields: ctx, userID
func (_m *Repository) GetUserDomains(ctx context.Context, userID uint64) (entity.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDomains")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (entity.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDomains'
type Repository_GetUserDomains_Call struct {
	*mock.Call
}

// GetUserDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *Repository_Expecter) GetUserDomains(ctx interface{}, userID interface{}) *Repository_GetUserDomains_Call {
	return &Repository_GetUserDomains_Call{Call: _e.mock.On("GetUserDomains", ctx, userID)}
}

func (_c *Repository_GetUserDomains_Call) Run(run func(ctx context.Context, userID uint64)) *Repository_GetUserDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_GetUserDomains_Call) Return(_a0 entity.User, _a1 error) *Repository_GetUserDomains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUserDomains_Call) RunAndReturn(run func(context.Context, uint64) (entity.User, error)) *Repository_GetUserDomains_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1, tx
func (_m *Repository) Update(ctx context.Context, _a1 *entity.User, tx *gorm.DB) error {
	ret := _m.Called(ctx, _a1, tx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User, *gorm.DB) error); ok {
		r0 = rf(ctx, _a1, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entity.User
//   - tx *gorm.DB
func (_e *Repository_Expecter) Update(ctx interface{}, _a1 interface{}, tx interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, _a1, tx)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, _a1 *entity.User, tx *gorm.DB)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User), args[2].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *entity.User, *gorm.DB) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
