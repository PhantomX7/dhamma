// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/PhantomX7/dhamma/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, refreshToken, tx
func (_m *Repository) Create(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB) error {
	ret := _m.Called(ctx, refreshToken, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RefreshToken, *gorm.DB) error); ok {
		r0 = rf(ctx, refreshToken, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken *entity.RefreshToken
//   - tx *gorm.DB
func (_e *Repository_Expecter) Create(ctx interface{}, refreshToken interface{}, tx interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, refreshToken, tx)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.RefreshToken), args[2].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *entity.RefreshToken, *gorm.DB) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, refreshToken, tx
func (_m *Repository) Delete(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB) error {
	ret := _m.Called(ctx, refreshToken, tx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RefreshToken, *gorm.DB) error); ok {
		r0 = rf(ctx, refreshToken, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken *entity.RefreshToken
//   - tx *gorm.DB
func (_e *Repository_Expecter) Delete(ctx interface{}, refreshToken interface{}, tx interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, refreshToken, tx)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.RefreshToken), args[2].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, *entity.RefreshToken, *gorm.DB) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvalidToken provides a mock function with given fields: ctx
func (_m *Repository) DeleteInvalidToken(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvalidToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteInvalidToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvalidToken'
type Repository_DeleteInvalidToken_Call struct {
	*mock.Call
}

// DeleteInvalidToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) DeleteInvalidToken(ctx interface{}) *Repository_DeleteInvalidToken_Call {
	return &Repository_DeleteInvalidToken_Call{Call: _e.mock.On("DeleteInvalidToken", ctx)}
}

func (_c *Repository_DeleteInvalidToken_Call) Run(run func(ctx context.Context)) *Repository_DeleteInvalidToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_DeleteInvalidToken_Call) Return(_a0 error) *Repository_DeleteInvalidToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteInvalidToken_Call) RunAndReturn(run func(context.Context) error) *Repository_DeleteInvalidToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, refreshTokenID
func (_m *Repository) FindByID(ctx context.Context, refreshTokenID string) (entity.RefreshToken, error) {
	ret := _m.Called(ctx, refreshTokenID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.RefreshToken, error)); ok {
		return rf(ctx, refreshTokenID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.RefreshToken); ok {
		r0 = rf(ctx, refreshTokenID)
	} else {
		r0 = ret.Get(0).(entity.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshTokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type Repository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshTokenID string
func (_e *Repository_Expecter) FindByID(ctx interface{}, refreshTokenID interface{}) *Repository_FindByID_Call {
	return &Repository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, refreshTokenID)}
}

func (_c *Repository_FindByID_Call) Run(run func(ctx context.Context, refreshTokenID string)) *Repository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_FindByID_Call) Return(_a0 entity.RefreshToken, _a1 error) *Repository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByID_Call) RunAndReturn(run func(context.Context, string) (entity.RefreshToken, error)) *Repository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidCountByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetValidCountByUserID(ctx context.Context, userID uint64) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetValidCountByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetValidCountByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidCountByUserID'
type Repository_GetValidCountByUserID_Call struct {
	*mock.Call
}

// GetValidCountByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *Repository_Expecter) GetValidCountByUserID(ctx interface{}, userID interface{}) *Repository_GetValidCountByUserID_Call {
	return &Repository_GetValidCountByUserID_Call{Call: _e.mock.On("GetValidCountByUserID", ctx, userID)}
}

func (_c *Repository_GetValidCountByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *Repository_GetValidCountByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_GetValidCountByUserID_Call) Return(_a0 int64, _a1 error) *Repository_GetValidCountByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetValidCountByUserID_Call) RunAndReturn(run func(context.Context, uint64) (int64, error)) *Repository_GetValidCountByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAllByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) InvalidateAllByUserID(ctx context.Context, userID uint64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAllByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InvalidateAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAllByUserID'
type Repository_InvalidateAllByUserID_Call struct {
	*mock.Call
}

// InvalidateAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *Repository_Expecter) InvalidateAllByUserID(ctx interface{}, userID interface{}) *Repository_InvalidateAllByUserID_Call {
	return &Repository_InvalidateAllByUserID_Call{Call: _e.mock.On("InvalidateAllByUserID", ctx, userID)}
}

func (_c *Repository_InvalidateAllByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *Repository_InvalidateAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Repository_InvalidateAllByUserID_Call) Return(_a0 error) *Repository_InvalidateAllByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InvalidateAllByUserID_Call) RunAndReturn(run func(context.Context, uint64) error) *Repository_InvalidateAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, refreshToken, tx
func (_m *Repository) Update(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB) error {
	ret := _m.Called(ctx, refreshToken, tx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RefreshToken, *gorm.DB) error); ok {
		r0 = rf(ctx, refreshToken, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken *entity.RefreshToken
//   - tx *gorm.DB
func (_e *Repository_Expecter) Update(ctx interface{}, refreshToken interface{}, tx interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, refreshToken, tx)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, refreshToken *entity.RefreshToken, tx *gorm.DB)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.RefreshToken), args[2].(*gorm.DB))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *entity.RefreshToken, *gorm.DB) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
