// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// GetMe provides a mock function with given fields: ctx
func (_m *Controller) GetMe(ctx *gin.Context) {
	_m.Called(ctx)
}

// Controller_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type Controller_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *Controller_Expecter) GetMe(ctx interface{}) *Controller_GetMe_Call {
	return &Controller_GetMe_Call{Call: _e.mock.On("GetMe", ctx)}
}

func (_c *Controller_GetMe_Call) Run(run func(ctx *gin.Context)) *Controller_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *Controller_GetMe_Call) Return() *Controller_GetMe_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_GetMe_Call) RunAndReturn(run func(*gin.Context)) *Controller_GetMe_Call {
	_c.Run(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx
func (_m *Controller) Refresh(ctx *gin.Context) {
	_m.Called(ctx)
}

// Controller_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Controller_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *Controller_Expecter) Refresh(ctx interface{}) *Controller_Refresh_Call {
	return &Controller_Refresh_Call{Call: _e.mock.On("Refresh", ctx)}
}

func (_c *Controller_Refresh_Call) Run(run func(ctx *gin.Context)) *Controller_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *Controller_Refresh_Call) Return() *Controller_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_Refresh_Call) RunAndReturn(run func(*gin.Context)) *Controller_Refresh_Call {
	_c.Run(run)
	return _c
}

// SignIn provides a mock function with given fields: ctx
func (_m *Controller) SignIn(ctx *gin.Context) {
	_m.Called(ctx)
}

// Controller_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type Controller_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *Controller_Expecter) SignIn(ctx interface{}) *Controller_SignIn_Call {
	return &Controller_SignIn_Call{Call: _e.mock.On("SignIn", ctx)}
}

func (_c *Controller_SignIn_Call) Run(run func(ctx *gin.Context)) *Controller_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *Controller_SignIn_Call) Return() *Controller_SignIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_SignIn_Call) RunAndReturn(run func(*gin.Context)) *Controller_SignIn_Call {
	_c.Run(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx
func (_m *Controller) SignUp(ctx *gin.Context) {
	_m.Called(ctx)
}

// Controller_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Controller_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *Controller_Expecter) SignUp(ctx interface{}) *Controller_SignUp_Call {
	return &Controller_SignUp_Call{Call: _e.mock.On("SignUp", ctx)}
}

func (_c *Controller_SignUp_Call) Run(run func(ctx *gin.Context)) *Controller_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *Controller_SignUp_Call) Return() *Controller_SignUp_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_SignUp_Call) RunAndReturn(run func(*gin.Context)) *Controller_SignUp_Call {
	_c.Run(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx
func (_m *Controller) UpdatePassword(ctx *gin.Context) {
	_m.Called(ctx)
}

// Controller_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type Controller_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *Controller_Expecter) UpdatePassword(ctx interface{}) *Controller_UpdatePassword_Call {
	return &Controller_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx)}
}

func (_c *Controller_UpdatePassword_Call) Run(run func(ctx *gin.Context)) *Controller_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *Controller_UpdatePassword_Call) Return() *Controller_UpdatePassword_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_UpdatePassword_Call) RunAndReturn(run func(*gin.Context)) *Controller_UpdatePassword_Call {
	_c.Run(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
