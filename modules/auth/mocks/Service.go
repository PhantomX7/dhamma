// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/PhantomX7/dhamma/modules/auth/dto/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/PhantomX7/dhamma/modules/auth/dto/response"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetMe provides a mock function with given fields: ctx
func (_m *Service) GetMe(ctx context.Context) (response.MeResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 response.MeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (response.MeResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) response.MeResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(response.MeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type Service_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) GetMe(ctx interface{}) *Service_GetMe_Call {
	return &Service_GetMe_Call{Call: _e.mock.On("GetMe", ctx)}
}

func (_c *Service_GetMe_Call) Run(run func(ctx context.Context)) *Service_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetMe_Call) Return(_a0 response.MeResponse, _a1 error) *Service_GetMe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetMe_Call) RunAndReturn(run func(context.Context) (response.MeResponse, error)) *Service_GetMe_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, _a1
func (_m *Service) Refresh(ctx context.Context, _a1 request.RefreshRequest) (response.AuthResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 response.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.RefreshRequest) (response.AuthResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.RefreshRequest) response.AuthResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.RefreshRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Service_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.RefreshRequest
func (_e *Service_Expecter) Refresh(ctx interface{}, _a1 interface{}) *Service_Refresh_Call {
	return &Service_Refresh_Call{Call: _e.mock.On("Refresh", ctx, _a1)}
}

func (_c *Service_Refresh_Call) Run(run func(ctx context.Context, _a1 request.RefreshRequest)) *Service_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.RefreshRequest))
	})
	return _c
}

func (_c *Service_Refresh_Call) Return(_a0 response.AuthResponse, _a1 error) *Service_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Refresh_Call) RunAndReturn(run func(context.Context, request.RefreshRequest) (response.AuthResponse, error)) *Service_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// SignIn provides a mock function with given fields: ctx, _a1
func (_m *Service) SignIn(ctx context.Context, _a1 request.SignInRequest) (response.AuthResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 response.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.SignInRequest) (response.AuthResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.SignInRequest) response.AuthResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.SignInRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type Service_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.SignInRequest
func (_e *Service_Expecter) SignIn(ctx interface{}, _a1 interface{}) *Service_SignIn_Call {
	return &Service_SignIn_Call{Call: _e.mock.On("SignIn", ctx, _a1)}
}

func (_c *Service_SignIn_Call) Run(run func(ctx context.Context, _a1 request.SignInRequest)) *Service_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.SignInRequest))
	})
	return _c
}

func (_c *Service_SignIn_Call) Return(_a0 response.AuthResponse, _a1 error) *Service_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_SignIn_Call) RunAndReturn(run func(context.Context, request.SignInRequest) (response.AuthResponse, error)) *Service_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, _a1
func (_m *Service) SignUp(ctx context.Context, _a1 request.SignUpRequest) (response.AuthResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 response.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.SignUpRequest) (response.AuthResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.SignUpRequest) response.AuthResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.SignUpRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Service_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.SignUpRequest
func (_e *Service_Expecter) SignUp(ctx interface{}, _a1 interface{}) *Service_SignUp_Call {
	return &Service_SignUp_Call{Call: _e.mock.On("SignUp", ctx, _a1)}
}

func (_c *Service_SignUp_Call) Run(run func(ctx context.Context, _a1 request.SignUpRequest)) *Service_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.SignUpRequest))
	})
	return _c
}

func (_c *Service_SignUp_Call) Return(_a0 response.AuthResponse, _a1 error) *Service_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_SignUp_Call) RunAndReturn(run func(context.Context, request.SignUpRequest) (response.AuthResponse, error)) *Service_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, _a1
func (_m *Service) UpdatePassword(ctx context.Context, _a1 request.UpdatePasswordRequest) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdatePasswordRequest) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type Service_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.UpdatePasswordRequest
func (_e *Service_Expecter) UpdatePassword(ctx interface{}, _a1 interface{}) *Service_UpdatePassword_Call {
	return &Service_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, _a1)}
}

func (_c *Service_UpdatePassword_Call) Run(run func(ctx context.Context, _a1 request.UpdatePasswordRequest)) *Service_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.UpdatePasswordRequest))
	})
	return _c
}

func (_c *Service_UpdatePassword_Call) Return(_a0 error) *Service_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_UpdatePassword_Call) RunAndReturn(run func(context.Context, request.UpdatePasswordRequest) error) *Service_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
